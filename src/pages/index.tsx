import {
  MagnifyingGlassIcon,
  ChevronDoubleLeftIcon,
  ChevronDoubleRightIcon,
} from "@heroicons/react/20/solid";
import Head from "next/head";
import Link from "next/link";
import Layout from "~/components/ui/Layout";
import { Textinput } from "~/components/ui/Textinput";
import React from "react";
import { useRouter } from "next/router";
import { cn } from "~/utils";
import { Main } from "~/components/ui/Main";
import { Button } from "~/components/ui/Button";
import Modal from "~/components/ui/Model";
import { api } from "~/utils/api";
import { type Workspace } from "@prisma/client";

const WorkspacesLinks = ({ workspaces }: { workspaces: Workspace[] }) => {
  const router = useRouter();

  return (
    <>
      {workspaces.map((val) => (
        <Link
          href={`/workspace/${val.id}`}
          className={cn(
            " px-6 py-3 transition-colors duration-200 ease-in-out hover:bg-blue-50 hover:text-blue-600",
            router.query.id === val.id &&
              "bg-blue-50 bg-opacity-75 text-blue-600 hover:bg-blue-50 hover:bg-opacity-75"
          )}
          key={val.id}
        >
          {val.name}
        </Link>
      ))}
    </>
  );
};

export function Nav({
  isShowing,
  setIsShowing,
}: {
  isShowing: boolean;
  setIsShowing: (isShowing: boolean) => void;
}) {
  const [query, setQuery] = React.useState("");

  const { data, isLoading } = api.workspace.workspaces.useQuery();

  const workspaces =
    query === ""
      ? data
      : data?.filter((data) =>
          data.name
            .toLowerCase()
            .replace(/\s+/g, "")
            .includes(query.toLowerCase().replace(/\s+/g, ""))
        );

  return (
    <nav
      className={cn(
        "relative scale-x-100 scroll-m-1 scroll-p-1 overflow-y-auto border-r border-gray-200 bg-white duration-200 ease-in-out",
        isShowing ? "w-72" : "w-0 overflow-hidden p-0"
      )}
    >
      <div className="sticky top-0">
        <div className="relative h-10 bg-white">
          <div className={cn("absolute right-0 top-1 block")}>
            <button
              className={cn(
                "rounded-md p-1 text-gray-400 hover:bg-gray-200 hover:text-gray-500 hover:shadow-sm"
              )}
              onClick={() => {
                setIsShowing(!isShowing);
              }}
            >
              <ChevronDoubleLeftIcon className="h-5 w-5" />
            </button>
          </div>
        </div>
        <div className="bg-white px-3">
          <Textinput
            leftIcon={<MagnifyingGlassIcon className="h-5 w-5 text-gray-400" />}
            placeholder="Search"
            className="shadow-lg"
            onChange={(event) => setQuery(event.target.value)}
          />
        </div>
        <div className="h-5"></div>
      </div>
      <div className="mb-4 flex flex-col text-gray-600 ">
        {isLoading ? (
          <div className="flex flex-col gap-2">
            <div className="mx-2 h-8 animate-pulse rounded bg-gray-200"></div>
            <div className="mx-2 h-8 animate-pulse rounded bg-gray-200"></div>
            <div className="mx-2 h-8 animate-pulse rounded bg-gray-200"></div>
          </div>
        ) : (
          <WorkspacesLinks workspaces={workspaces ?? []} />
        )}
      </div>
    </nav>
  );
}

export function CreateWorkspace() {
  const [isShowing, setIsShowing] = React.useState(false);
  const initialFocusRef = React.useRef(null);

  const { mutateAsync, isLoading } = api.workspace.create.useMutation();
  const [name, setName] = React.useState("");

  return (
    <>
      <Button onClick={() => setIsShowing(true)}>Create Workspace</Button>
      <Modal
        title="Create Workspace"
        isOpen={isShowing}
        setIsOpen={() => setIsShowing(false)}
        initialFocus={initialFocusRef}
      >
        <form
          onSubmit={(e) => {
            const handler = async () => {
              e.preventDefault();
              await mutateAsync({ name });
              setIsShowing(false);
            };

            void handler();
          }}
        >
          <div className="my-1">
            <Textinput
              placeholder="Workspace Name"
              ref={initialFocusRef}
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
          </div>
          <div className="flex justify-end space-x-1">
            <Button type="submit" isloading={isLoading}>
              Create
            </Button>
            <Button
              type="button"
              onClick={() => setIsShowing(false)}
              variant="secondary"
            >
              Cancel
            </Button>
          </div>
        </form>
      </Modal>
    </>
  );
}

export default function Home() {
  const [isShowing, setIsShowing] = React.useState(true);
  return (
    <Layout>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="w-screen border border-gray-200 bg-white">
        <div className="flex h-10 items-center justify-between px-3">
          <div className="flex items-center">
            <button
              className={cn(
                "rounded-md p-1 text-gray-400 transition-opacity duration-200 ease-in-out hover:bg-gray-200 hover:text-gray-500 hover:shadow-sm",
                isShowing ? "pointer-events-none opacity-0" : "opacity-100"
              )}
              onClick={() => {
                setIsShowing(!isShowing);
              }}
            >
              <ChevronDoubleRightIcon className="h-5 w-5" />
            </button>
            <div className="ml-2 text-gray-600">Workspace</div>
          </div>
        </div>
      </header>
      <div className="flex flex-1 overflow-hidden">
        <Nav isShowing={isShowing} setIsShowing={setIsShowing} />
        <Main>
          <div className="flex h-full items-center justify-center">
            <div>
              <div className="mb-4 text-center text-2xl text-gray-600">
                Welcome!
              </div>
              <div className="mb-4 text-center text-gray-600">
                Create a workspace to get started
              </div>
              <div className="flex justify-center">
                <CreateWorkspace />
              </div>
            </div>
          </div>
        </Main>
      </div>
    </Layout>
  );
}
