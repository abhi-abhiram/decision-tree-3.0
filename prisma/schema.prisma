// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Workspace {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    trees     Tree[]
    folders   Folder[]
}

model Tree {
    id          String     @id @default(cuid())
    name        String
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    workspaceId String
    workspace   Workspace  @relation(fields: [workspaceId], references: [id])
    rootNodeId  String?
    nodes       Node[]
    folders     Folder[]
    vars        Variable[]
}

model Node {
    id                String   @id @default(cuid())
    name              String
    question          String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    treeId            String
    type              NodeType
    parentId          String?
    parent            Node?    @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
    children          Node[]   @relation("ParentChild")
    linkedNextOptions Option[]
    tree              Tree     @relation(fields: [treeId], references: [id], onDelete: Cascade)
    options           Option[] @relation("NodeOptions")
}

model Folder {
    id          String    @id @default(cuid())
    name        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    parentId    String?
    parent      Folder?   @relation("ParentChild", fields: [parentId], references: [id])
    children    Folder[]  @relation("ParentChild")
    trees       Tree[]
    Workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String
}

model Option {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    label      String    @default("")
    value      String    @default("")
    nodeId     String
    node       Node      @relation("NodeOptions", fields: [nodeId], references: [id])
    nextNodeId String
    nextNode   Node      @relation(fields: [nextNodeId], references: [id])
    varid      String?
    var        Variable? @relation(fields: [varid], references: [id])
}

model Variable {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    value     String
    treeId    String
    tree      Tree     @relation(fields: [treeId], references: [id])
    options   Option[]
}

enum NodeType {
    MultipleChoice
    Select
    Text
    SingleInput
    Date
    Number
}
