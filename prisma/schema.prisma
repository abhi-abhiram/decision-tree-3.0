// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Workspace {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    trees     Tree[]
    folders   Folder[]
}

model Tree {
    id          String       @id @default(cuid())
    name        String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    workspaceId String
    workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    rootNodeId  String?      @unique
    rootNode    Node?        @relation("RootTree", fields: [rootNodeId], references: [id])
    nodes       Node[]
    folderId    String?
    folder      Folder?      @relation(fields: [folderId], references: [id], onDelete: Cascade)
    vars        Variable[]
    bridgeNodes BridgeNode[] @relation("BridgeFrom")
    bridgedTo   BridgeNode[] @relation("BridgeTo")
}

model Node {
    id                String       @id @default(cuid())
    name              String
    question          String
    img               String?
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    treeId            String
    type              NodeType
    helpText          String?
    parentId          String?
    parent            Node?        @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
    children          Node[]       @relation("ParentChild")
    linkedNextOptions Option[]
    tree              Tree         @relation(fields: [treeId], references: [id], onDelete: Cascade)
    options           Option[]     @relation("NodeOptions")
    Tree              Tree?        @relation("RootTree")
    vars              Variable[]
    bridgeNodes       BridgeNode[]
    defaultNextNodeId String?
}

model BridgeNode {
    id         String     @id @default(cuid())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    name       String
    parentId   String
    parent     Node       @relation(fields: [parentId], references: [id], onDelete: Cascade)
    fromTreeId String
    fromTree   Tree       @relation("BridgeFrom", fields: [fromTreeId], references: [id], onDelete: Cascade)
    toTreeId   String
    toTree     Tree       @relation("BridgeTo", fields: [toTreeId], references: [id], onDelete: Cascade)
    type       BridgeType @default(BridgeType)
    options    Option[]
}

model Folder {
    id          String    @id @default(cuid())
    name        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    parentId    String?
    parent      Folder?   @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
    children    Folder[]  @relation("ParentChild")
    trees       Tree[]
    Workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String
}

model Option {
    id         String      @id @default(cuid())
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    label      String      @default("")
    value      String      @default("")
    nodeId     String
    node       Node        @relation("NodeOptions", fields: [nodeId], references: [id], onDelete: Cascade)
    nextNodeId String?
    nextNode   Node?       @relation(fields: [nextNodeId], references: [id], onDelete: Cascade)
    varid      String?
    var        Variable?   @relation(fields: [varid], references: [id])
    bridgeId   String?
    bridge     BridgeNode? @relation(fields: [bridgeId], references: [id], onDelete: Cascade)
}

model Model {
    id              String     @id @default(cuid())
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    name            String
    sourceRelations Relation[] @relation("source")
    targetRelations Relation[] @relation("target")
    variables       Variable[]
    positionX       Int        @default(0)
    positionY       Int        @default(0)
}

model Variable {
    id           String      @id @default(cuid())
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    name         String
    dataType     VarDataType @default(String)
    modelId      String
    model        Model       @relation(fields: [modelId], references: [id], onDelete: Cascade)
    isForeignKey Boolean     @default(false)
    operator     VarOperator @default(Replace)
    treeId       String?
    tree         Tree?       @relation(fields: [treeId], references: [id], onDelete: Cascade)
    nodes        Node[]
    options      Option[]
}

model Relation {
    id        String       @id @default(cuid())
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    name      String
    sourceId  String
    targetId  String
    source    Model        @relation("source", fields: [sourceId], references: [id])
    target    Model        @relation("target", fields: [targetId], references: [id])
    varId     String       @unique
    type      RelationType
}

enum NodeType {
    MultipleChoice
    Select
    SingleInput
    MultiInput
    Date
    Number
}

enum BridgeType {
    BridgeType
}

enum VarOperator {
    Replace
    Append
}

enum VarDataType {
    String
    Number
    Date
    Boolean
}

enum RelationType {
    OneToOne
    OneToMany
    ManyToMany
}
